// C++ code to test accuracy of ML model
// Not to be directly implemented on FPGA

#include <iostream>
#include <vector>
#include <math.h>
#include <algorithm>

// #include "ap_axi_sdata.h" // ap_axis can also be used, but it will include all sideband signals which we don't need
//  #include "hls_stream.h"
//  #include "ap_int.h"

#define INPUT_SIZE 14   // number of inputs
#define LAYER_1_SIZE 16 // number of nodes in layer 1
#define LAYER_2_SIZE 8  // number of nodes in layer 2
#define OUTPUT_SIZE 5   // number of outputs

int main()
{
    // Define input test data
    int expected_result = 1;
    float input[INPUT_SIZE] = {-2.88, 8.94, -0.86, -0.05, 0.1, 0.18, 1.7333, 5.1621, 8.94, -2.88, 0.07666, 0.09533, 0.18, -0.05};
    // Define the weights and biases
    // Define the weights and biases
    float w1[INPUT_SIZE][LAYER_1_SIZE] = {{-2.133155912160873413e-01, 2.618664503097534180e-01, 1.315897107124328613e-01, -2.678113989531993866e-02, 2.889614999294281006e-01, -2.632325589656829834e-01, -9.177273511886596680e-02, -7.484595179557800293e-01, 1.841939091682434082e-01, -5.882536172866821289e-01, 4.744506478309631348e-01, -6.713663935661315918e-01, 6.866052746772766113e-01, 7.182512283325195312e-01, 1.904940903186798096e-01, -1.204174637794494629e+00},
                                          {2.409007996320724487e-01, 9.991191625595092773e-01, -2.719051763415336609e-02, -9.149973094463348389e-02, 1.092707276344299316e+00, 2.507817149162292480e-01, 1.716306358575820923e-01, 9.424673914909362793e-01, -3.085241615772247314e-01, -3.920392990112304688e-01, -1.303556680679321289e+00, 7.839971780776977539e-01, -2.968859076499938965e-01, 6.787260621786117554e-02, 6.665711998939514160e-01, 2.217347919940948486e-01},
                                          {7.310296893119812012e-01, -8.376564979553222656e-01, -7.371625900268554688e-01, -3.705994486808776855e-01, 5.053622275590896606e-02, -7.679788023233413696e-02, -4.275325238704681396e-01, -3.587650135159492493e-02, -2.142867445945739746e-01, 1.089946031570434570e-01, 7.977029085159301758e-01, 2.553273364901542664e-02, 5.343487262725830078e-01, -5.042784810066223145e-01, -1.336546391248703003e-01, 1.127742648124694824e+00},
                                          {-1.706153303384780884e-01, 2.738464251160621643e-02, -6.041967868804931641e-01, 4.392100870609283447e-02, 5.394759774208068848e-01, 1.047677099704742432e-01, -4.858724772930145264e-01, 1.968029141426086426e-01, -4.648830890655517578e-01, 1.755731850862503052e-01, 2.750753164291381836e-01, 5.913268327713012695e-01, -2.260939329862594604e-01, 1.180689573287963867e+00, 1.790071427822113037e-01, -5.261583924293518066e-01},
                                          {-2.809218466281890869e-01, 4.860846400260925293e-01, 2.609917707741260529e-02, 7.574480175971984863e-01, -5.491848587989807129e-01, 1.852490544319152832e+00, 9.108882546424865723e-01, 1.050329804420471191e+00, 1.305275708436965942e-01, -2.151694335043430328e-02, -3.713206648826599121e-01, -5.669360756874084473e-01, -7.421035170555114746e-01, -1.878110319375991821e-01, -2.604263126850128174e-01, 7.124882936477661133e-01},
                                          {5.665719509124755859e-01, -4.627080261707305908e-01, 1.737349033355712891e-01, 4.718288481235504150e-01, -1.225602477788925171e-01, 2.854401469230651855e-01, -2.895559743046760559e-02, 5.052313208580017090e-01, -1.889571696519851685e-01, -7.542965561151504517e-02, -7.970681786537170410e-01, 4.893769696354866028e-02, -9.784568548202514648e-01, 4.038235545158386230e-02, 3.099879324436187744e-01, 1.488386988639831543e-01},
                                          {2.235421687364578247e-01, 4.093084335327148438e-01, -6.100106835365295410e-01, -4.520491063594818115e-01, 8.959546089172363281e-01, -1.053427010774612427e-01, -1.851519048213958740e-01, 9.335177540779113770e-01, 4.316538870334625244e-01, -2.621251046657562256e-01, -4.455774426460266113e-01, 3.209485486149787903e-02, -2.790239639580249786e-02, -3.582669496536254883e-01, 1.690056025981903076e-01, 6.294434070587158203e-01},
                                          {-3.566272556781768799e-01, -2.150494456291198730e-01, -6.068403124809265137e-01, 1.036528706550598145e+00, 8.192262649536132812e-01, -2.061329632997512817e-01, 1.559478193521499634e-01, -6.210528016090393066e-01, 4.824034869670867920e-01, 4.522994458675384521e-01, -1.327980756759643555e-01, -3.689957261085510254e-01, -5.615842938423156738e-01, -3.754972219467163086e-01, 3.055731356143951416e-01, 1.848896294832229614e-01},
                                          {-1.029100656509399414e+00, -5.501466393470764160e-01, -6.216913461685180664e-01, 1.470796018838882446e-01, 1.458785980939865112e-01, -5.512419342994689941e-01, -6.684544086456298828e-01, -1.914697408676147461e+00, -9.050936102867126465e-01, 1.088062763214111328e+00, -8.471276164054870605e-01, -4.219450950622558594e-01, 5.322433114051818848e-01, -6.585378050804138184e-01, 7.671738862991333008e-01, 1.737510859966278076e-01},
                                          {-1.327083110809326172e-01, 8.060365915298461914e-02, -4.085936844348907471e-01, -1.710952520370483398e-01, 1.972965747117996216e-01, 3.403657376766204834e-01, -6.971263326704502106e-03, -2.728598415851593018e-01, -5.198388695716857910e-01, 1.076244950294494629e+00, 2.133165597915649414e-01, -1.346098482608795166e-01, 3.473536670207977295e-01, -1.158357337117195129e-01, 4.881807044148445129e-02, -2.121575772762298584e-01},
                                          {3.736252784729003906e-01, 3.894915431737899780e-02, 1.958928555250167847e-01, 4.563712477684020996e-01, 9.659174084663391113e-02, 9.549589753150939941e-01, -2.421967238187789917e-01, 7.866821885108947754e-01, -9.326917529106140137e-01, 6.527793407440185547e-01, -4.006322100758552551e-02, -4.782370477914810181e-02, -6.279727816581726074e-01, 3.798226714134216309e-01, 8.696702718734741211e-01, 7.455456256866455078e-02},
                                          {-2.666134834289550781e-01, -3.350822627544403076e-01, 5.409805849194526672e-02, -3.272102773189544678e-01, -3.079896867275238037e-01, 4.948886930942535400e-01, -5.506571531295776367e-01, -2.735052704811096191e-01, 3.427287936210632324e-01, 2.644471228122711182e-01, 4.317322373390197754e-02, 2.097817212343215942e-01, 5.336237549781799316e-01, 2.862785756587982178e-01, 9.028512984514236450e-02, -3.437887430191040039e-01},
                                          {2.944079935550689697e-01, -7.427598834037780762e-01, -5.469581484794616699e-02, -3.073426485061645508e-01, -2.084452509880065918e-01, 4.739164113998413086e-01, -3.475946187973022461e-01, 2.415893226861953735e-01, 2.725329399108886719e-01, 5.308154225349426270e-01, 2.419383525848388672e-01, -5.658932328224182129e-01, 5.995523333549499512e-01, 1.903925277292728424e-02, 7.419957518577575684e-01, 2.867436110973358154e-01},
                                          {-4.313545525074005127e-01, 5.778782367706298828e-01, 3.067350387573242188e-01, -4.766752123832702637e-01, -1.961220651865005493e-01, -2.349937558174133301e-01, 1.217967987060546875e+00, 7.182639092206954956e-02, -5.085929632186889648e-01, 2.249721139669418335e-01, 1.925697028636932373e-01, -2.473295666277408600e-02, -3.771693408489227295e-01, 4.432307779788970947e-01, -1.067677810788154602e-01, -3.185070157051086426e-01}};
    float b1[LAYER_1_SIZE] = {8.893495798110961914e-01,
                              3.974404335021972656e-01,
                              -1.035186648368835449e+00,
                              1.994865685701370239e-01,
                              7.279304862022399902e-01,
                              2.139177471399307251e-01,
                              8.130066990852355957e-01,
                              2.732018828392028809e-01,
                              7.854696512222290039e-01,
                              2.495443075895309448e-01,
                              7.073302865028381348e-01,
                              4.024012386798858643e-01,
                              4.130957126617431641e-01,
                              3.520609140396118164e-01,
                              -3.282422721385955811e-01,
                              3.169299066066741943e-01};

    float w2[LAYER_1_SIZE][LAYER_2_SIZE] = {{-6.837754249572753906e-01, 6.964333653450012207e-01, 6.092982366681098938e-02, -1.006420731544494629e+00, 6.579678654670715332e-01, -2.136882990598678589e-01, 6.023984774947166443e-02, 1.158113330602645874e-01},
                                            {8.205275535583496094e-01, 3.408122658729553223e-01, 2.738406956195831299e-01, -3.650623857975006104e-01, 1.076875805854797363e+00, 8.388493061065673828e-01, -8.277881741523742676e-01, 3.865117430686950684e-01},
                                            {7.296617031097412109e-01, -7.469862103462219238e-01, -8.600693345069885254e-01, 7.889729142189025879e-01, -2.095476686954498291e-01, -5.112151503562927246e-01, 1.067974209785461426e+00, -6.703520417213439941e-01},
                                            {1.078523755073547363e+00, 1.857197880744934082e-01, 2.807379364967346191e-01, -4.109073579311370850e-01, 4.506450518965721130e-02, 2.271171808242797852e-01, -6.415144205093383789e-01, -2.789841890335083008e-01},
                                            {1.188477352261543274e-01, 5.575274825096130371e-01, 4.204393029212951660e-01, 1.589445173740386963e-01, 7.915619611740112305e-01, -1.095208674669265747e-01, -4.097319245338439941e-01, 8.965228796005249023e-01},
                                            {2.703574597835540771e-01, 4.981581866741180420e-01, -5.438849329948425293e-01, -5.517038106918334961e-01, 3.939652349799871445e-03, -1.374904274940490723e+00, -2.804387509822845459e-01, -7.018408924341201782e-02},
                                            {-1.434725373983383179e-01, -4.258636757731437683e-02, 4.582743346691131592e-01, -1.414669752120971680e-01, -1.998612880706787109e+00, -2.015751004219055176e-01, 1.093866467475891113e+00, 2.895449995994567871e-01},
                                            {8.732905983924865723e-02, -5.598089098930358887e-01, -3.161284923553466797e-01, 9.974142909049987793e-01, -1.475373804569244385e-01, 1.396511316299438477e+00, 5.777593255043029785e-01, 5.464861989021301270e-01},
                                            {2.057442963123321533e-01, -5.798431634902954102e-01, 1.167541027069091797e+00, -4.126962721347808838e-01, 9.773001074790954590e-02, 9.727544784545898438e-01, 2.220575660467147827e-01, 2.658991217613220215e-01},
                                            {-5.368599295616149902e-01, -8.988266438245773315e-02, -6.666389107704162598e-01, 1.374034583568572998e-01, 3.853988051414489746e-01, 9.644809365272521973e-01, -1.005706906318664551e+00, 6.586479544639587402e-01},
                                            {-7.424961924552917480e-01, -2.159008741378784180e+00, -1.261449098587036133e+00, 6.219451427459716797e-01, -1.861812472343444824e-01, 6.027449369430541992e-01, -1.015485048294067383e+00, 2.088808119297027588e-01},
                                            {3.410961031913757324e-01, -2.584426403045654297e-01, -1.925908029079437256e-01, -3.851946294307708740e-01, -7.432913184165954590e-01, -2.381180375814437866e-01, 6.680679917335510254e-01, 1.015844941139221191e+00},
                                            {6.310091018676757812e-01, -5.187785029411315918e-01, -6.784736514091491699e-01, 2.863767445087432861e-01, 4.986650347709655762e-01, -6.171668767929077148e-01, -4.909865260124206543e-01, 5.791947245597839355e-02},
                                            {6.828237175941467285e-01, 7.176550030708312988e-01, -2.510854005813598633e-01, -5.223937630653381348e-01, -1.485426723957061768e-01, -3.976337611675262451e-01, -1.712623983621597290e-01, -9.198912419378757477e-03},
                                            {1.612168550491333008e-01, -5.403931736946105957e-01, 6.490159630775451660e-01, 3.776052296161651611e-01, -1.923944801092147827e-01, 2.478199005126953125e-01, 6.109010577201843262e-01, -7.121943235397338867e-01},
                                            {-4.344513714313507080e-01, 3.901696503162384033e-01, -1.113077402114868164e+00, 8.042640686035156250e-01, -3.340083956718444824e-01, -6.593325734138488770e-01, 8.539461493492126465e-01, -3.128131628036499023e-01}};

    float b2[LAYER_2_SIZE] = {-6.225885748863220215e-01,
                              2.122158706188201904e-01,
                              -3.021371662616729736e-01,
                              1.584775745868682861e-01,
                              9.255585074424743652e-02,
                              2.571064531803131104e-01,
                              1.834420114755630493e-01,
                              4.409503340721130371e-01};

    float w3[LAYER_2_SIZE][OUTPUT_SIZE] = {{-1.768512427806854248e-01, 4.675069153308868408e-01, 1.035416722297668457e+00, -2.816163599491119385e-01, -1.464153528213500977e+00},
                                           {7.903838902711868286e-02, -5.727003216743469238e-01, -1.566510796546936035e+00, 1.285009264945983887e+00, -7.291768193244934082e-01},
                                           {-4.544427990913391113e-01, 7.327021360397338867e-01, 3.665071427822113037e-01, 1.014722585678100586e+00, -1.796543121337890625e+00},
                                           {-6.551092863082885742e-02, -4.037984907627105713e-01, 1.122415065765380859e+00, -1.302705168724060059e+00, -5.175181627273559570e-01},
                                           {-4.714508950710296631e-01, -7.492344826459884644e-02, -1.152764081954956055e+00, -8.486549556255340576e-02, 1.617919921875000000e+00},
                                           {-3.462677299976348877e-01, 9.692712426185607910e-01, -8.046442866325378418e-01, -2.353741645812988281e+00, -3.609336018562316895e-01},
                                           {-3.722600340843200684e-01, -2.726016998291015625e+00, -8.895503282546997070e-01, 3.572512269020080566e-01, 9.189292788505554199e-01},
                                           {6.418696641921997070e-01, -8.168255090713500977e-01, -5.409186482429504395e-01, -1.743076741695404053e-01, -5.192329883575439453e-01}}; // weight 3 2D array
    float b3[OUTPUT_SIZE] = {4.915983974933624268e-01,
                             -4.647717475891113281e-01,
                             2.063445895910263062e-01,
                             5.299844741821289062e-01,
                             -1.545012116432189941e+00}; // bias 3 2D array

    // Placeholder variable for temporarily storage of matrix operation results
    float sum;

    // Layer 1 logic:
    std::cout << std::endl;
    std::cout << "Layer 1:" << std::endl;

    float result1[LAYER_1_SIZE];

    // Matrix multiplication: input * weight 1 = result1
    // Matrix addition: result1 + bias 1 = result1

    for (int i = 0; i < LAYER_1_SIZE; i++)
    {
        sum = 0.0;
        for (int j = 0; j < INPUT_SIZE; j++)
        {
            sum += input[j] * w1[j][i];
        }
        result1[i] = sum + b1[i];

        // Apply relu activation function
        if (result1[i] < 0.0)
        {
            result1[i] = 0.0;
        }
        std::cout << result1[i] << ", ";
    }
    std::cout << std::endl;

    // Layer 2 logic:
    std::cout << std::endl;
    std::cout << "Layer 2:" << std::endl;

    float result2[LAYER_2_SIZE];

    // Matrix multiplication: result1 * weight 2 = result2
    // Matrix addition: result2 + bias 2 = result2

    for (int i = 0; i < LAYER_2_SIZE; i++)
    {
        sum = 0.0;
        for (int j = 0; j < LAYER_1_SIZE; j++)
        {
            sum += result1[j] * w2[j][i];
        }
        result2[i] = sum + b2[i];

        // Apply relu activation function
        if (result2[i] < 0.0)
        {
            result2[i] = 0.0;
        }
        std::cout << result2[i];
        std::cout << ", ";
    }
    std::cout << std::endl;

    // Layer 3 logic:
    std::cout << std::endl;
    std::cout << "Layer 3:" << std::endl;

    float result3[OUTPUT_SIZE];

    // Matrix multiplication: result2 * weight 3 = result3
    // Matrix addition: result3 + bias 3 = result3

    for (int i = 0; i < OUTPUT_SIZE; i++)
    {
        sum = 0.0;
        for (int j = 0; j < LAYER_2_SIZE; j++)
        {
            sum += result2[j] * w3[j][i];
        }
        result3[i] = sum + b3[i];

        // Apply softmax activation function
        sum = 0.0;
        for (int i = 0; i < OUTPUT_SIZE; i++)
        {
            sum += exp(result3[i]);
        }
        for (int i = 0; i < OUTPUT_SIZE; i++)
        {
            result3[i] = exp(result3[i]) / sum;
        }
        std::cout << result3[i] << ", ";
    }
    std::cout << std::endl;

    // Output the classification result
    int max = 0;
    for (int i = 0; i < OUTPUT_SIZE; i++)
    {
        if (result3[i] > result3[max])
        {
            max = i;
        }
    }
    std::cout << std::endl
              << "Expected result: " << expected_result << std::endl;
    std::cout << "Actual result: " << max << std::endl;
}